version: "3"

services:
  app:
    build:
      args:
        user: muhsenmaqsudi
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    container_name: ${APP_NAME}-app
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    volumes:
      - ./:/var/www
    ports:
      - "9000:9000"
    networks:
      - backend
  db:
    image: mysql:latest
    container_name: ${APP_NAME}-db
    restart: unless-stopped
    tty: true
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: root
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - "3306:3306"
    volumes:
      #            - ./docker-compose/mysql:/docker-entrypoint-initdb.d
      - dbdata:/var/lib/mysql
    networks:
      - backend
  nginx:
    image: nginx:stable-alpine
    container_name: ${APP_NAME}-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./:/var/www
      - ./docker-compose/nginx:/etc/nginx/conf.d
    depends_on:
      - app
      - db
    networks:
      - backend
      - frontend
  redis:
    container_name: ${APP_NAME}-redis
    image: redis:latest
    volumes:
      - redisdata:/data
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend
  npm:
    image: node:13-alpine3.10
    container_name: ${APP_NAME}-npm
    volumes:
      - ./:/var/www
    working_dir: /var/www/
    entrypoint: ['npm']
    networks:
      - frontend
  composer:
    image: composer:latest
    container_name: ${APP_NAME}-composer
    volumes:
      - ./:/var/www
    working_dir: /var/www
    networks:
      - backend
  artisan:
    build:
      args:
        user: muhsenmaqsudi
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    container_name: ${APP_NAME}-artisan
    volumes:
      - ./:/var/www
    depends_on:
      - db
    working_dir: /var/www
    entrypoint: ['php', '/var/www/artisan']
    networks:
      - backend

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  dbdata:
    driver: local
  redisdata:
    driver: local
